{
    "collab_server" : "",
    "contents" : "setwd(\"~/R\")\n\n#####################################################################\n##Step 1 - download and merge the zip file data to create one dataset\n#####################################################################\n\n\n#Step 1.1 - Download the data\nfile_url <- \"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip \"\nfile_raw <- \"raw_data.zip\"\n\ndownload.file(file_url, file_raw)\nunzip(file_raw) \n\n#Step 1.2 - Read the data from the unzipped file\nx_train <- read.table(\"~/R/UCI HAR Dataset/train/X_train.txt\")\ny_train <- read.table(\"~/R/UCI HAR Dataset/train/y_train.txt\")\nsubject_train <- read.table(\"~/R/UCI HAR Dataset/train/subject_train.txt\")\n\nx_test <- read.table(\"~/R/UCI HAR Dataset/test/X_test.txt\")\ny_test <- read.table(\"~/R/UCI HAR Dataset/test/y_test.txt\")\nsubject_test <- read.table(\"~/R/UCI HAR Dataset/test/subject_test.txt\")\n\nfeatures <- read.table(\"~/R/UCI HAR Dataset/features.txt\")\nactivity_labels = read.table(\"~/R/UCI HAR Dataset/activity_labels.txt\")\n\n# Step 1.3 - Assign column names (also step 3, descriptive activity names)\n\ncolnames(x_train) <- features[,2] \ncolnames(x_test) <- features[,2] \n\ncolnames(subject_train) <- \"subjectId\"\ncolnames(subject_test) <- \"subjectId\"\n\ncolnames(y_train) <-\"activityId\"\ncolnames(y_test) <-\"activityId\"\n\ncolnames(activity_labels) <- c('activityId','activityType')\n\n# Step 1.4 - Bind test and train data\ntraining_data = cbind(y_train,subject_train,x_train)\ntest_data = cbind(y_test,subject_test,x_test)\ndata_bind <- rbind(training_data, test_data)\n\n\n###############################################################\n# Step 2 - extract mean and std variables\n###############################################################\n\n# Step 2.1 - vector of column names\ncol_names <- names(data_bind)\nmean_std <- grepl(\"-(mean|std)\\\\(\\\\)\", features[, 2])\nfinal_data = data_bind[mean_std==TRUE]\n\n################################################################\n#step 4 - Use appropriate labels with descriptive variable names\n################################################################\n\nnames(final_data)<-gsub(\"^t\", \"time\", names(final_data))\nnames(final_data)<-gsub(\"^f\", \"frequency\", names(final_data))\nnames(final_data)<-gsub(\"Acc\", \"Accelerometer\", names(final_data))\nnames(final_data)<-gsub(\"Gyro\", \"Gyroscope\", names(final_data))\nnames(final_data)<-gsub(\"Mag\", \"Magnitude\", names(final_data))\nnames(final_data)<-gsub(\"BodyBody\", \"Body\", names(final_data))\nnames(final_data)<-gsub(\"mean\", \"Mean\", names(final_data))\nnames(final_data)<-gsub(\"std\", \"Std\", names(final_data))\n\n###################################################################\n# Step 5 - create at tidy data set\n##################################################################\ndata_tidy<-aggregate(. ~subjectId + activityId, final_data, mean)\ndata_tidy <-data_tidy[order(data_tidy$subjectId,data_tidy$activityId),]\n##Step 3 - Use descriptive Activity names\ndata_tidy[, 2] <- activity_labels[data_tidy[, 2], 2]\nwrite.table(data_tidy, file = \"tidydata.txt\", row.names=TRUE, sep='\\t')\n\n",
    "created" : 1480102438895.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2753433561",
    "id" : "6D62DBA2",
    "lastKnownWriteTime" : 1480102478,
    "last_content_update" : -2147483648,
    "path" : "~/R/CorseraWk4/Wk4/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}